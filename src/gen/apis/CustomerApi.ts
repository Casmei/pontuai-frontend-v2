/* tslint:disable */
/* eslint-disable */
/**
 * Pontuaí
 * The Pontuaí API experience :)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateCustomerDto,
  CreateCustomerResponse,
  CustomerWithPointsResponse,
  GetCustomerDetailResponse,
  GetCustomerTransactionDetailResponse,
} from '../models/index';
import {
    CreateCustomerDtoFromJSON,
    CreateCustomerDtoToJSON,
    CreateCustomerResponseFromJSON,
    CreateCustomerResponseToJSON,
    CustomerWithPointsResponseFromJSON,
    CustomerWithPointsResponseToJSON,
    GetCustomerDetailResponseFromJSON,
    GetCustomerDetailResponseToJSON,
    GetCustomerTransactionDetailResponseFromJSON,
    GetCustomerTransactionDetailResponseToJSON,
} from '../models/index';

export interface CustomerControllerCreateRequest {
    xTenantId: string;
    createCustomerDto: CreateCustomerDto;
}

export interface CustomerControllerGetAllRequest {
    xTenantId: string;
    query?: string;
}

export interface CustomerControllerGetCustomerDetailRequest {
    customerId: string;
    xTenantId: string;
}

export interface CustomerControllerGetCustomerTransactionDetailRequest {
    customerId: string;
    xTenantId: string;
}

/**
 * 
 */
export class CustomerApi extends runtime.BaseAPI {

    /**
     * Create a new customer
     */
    async customerControllerCreateRaw(requestParameters: CustomerControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateCustomerResponse>> {
        if (requestParameters['xTenantId'] == null) {
            throw new runtime.RequiredError(
                'xTenantId',
                'Required parameter "xTenantId" was null or undefined when calling customerControllerCreate().'
            );
        }

        if (requestParameters['createCustomerDto'] == null) {
            throw new runtime.RequiredError(
                'createCustomerDto',
                'Required parameter "createCustomerDto" was null or undefined when calling customerControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xTenantId'] != null) {
            headerParameters['x-tenant-id'] = String(requestParameters['xTenantId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateCustomerDtoToJSON(requestParameters['createCustomerDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateCustomerResponseFromJSON(jsonValue));
    }

    /**
     * Create a new customer
     */
    async customerControllerCreate(requestParameters: CustomerControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateCustomerResponse> {
        const response = await this.customerControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get customers
     */
    async customerControllerGetAllRaw(requestParameters: CustomerControllerGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CustomerWithPointsResponse>>> {
        if (requestParameters['xTenantId'] == null) {
            throw new runtime.RequiredError(
                'xTenantId',
                'Required parameter "xTenantId" was null or undefined when calling customerControllerGetAll().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['query'] != null) {
            queryParameters['query'] = requestParameters['query'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTenantId'] != null) {
            headerParameters['x-tenant-id'] = String(requestParameters['xTenantId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CustomerWithPointsResponseFromJSON));
    }

    /**
     * Get customers
     */
    async customerControllerGetAll(requestParameters: CustomerControllerGetAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CustomerWithPointsResponse>> {
        const response = await this.customerControllerGetAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get unique customer
     */
    async customerControllerGetCustomerDetailRaw(requestParameters: CustomerControllerGetCustomerDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCustomerDetailResponse>> {
        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling customerControllerGetCustomerDetail().'
            );
        }

        if (requestParameters['xTenantId'] == null) {
            throw new runtime.RequiredError(
                'xTenantId',
                'Required parameter "xTenantId" was null or undefined when calling customerControllerGetCustomerDetail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTenantId'] != null) {
            headerParameters['x-tenant-id'] = String(requestParameters['xTenantId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers/{customerId}`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters['customerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCustomerDetailResponseFromJSON(jsonValue));
    }

    /**
     * Get unique customer
     */
    async customerControllerGetCustomerDetail(requestParameters: CustomerControllerGetCustomerDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCustomerDetailResponse> {
        const response = await this.customerControllerGetCustomerDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get customer transaction details
     */
    async customerControllerGetCustomerTransactionDetailRaw(requestParameters: CustomerControllerGetCustomerTransactionDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetCustomerTransactionDetailResponse>> {
        if (requestParameters['customerId'] == null) {
            throw new runtime.RequiredError(
                'customerId',
                'Required parameter "customerId" was null or undefined when calling customerControllerGetCustomerTransactionDetail().'
            );
        }

        if (requestParameters['xTenantId'] == null) {
            throw new runtime.RequiredError(
                'xTenantId',
                'Required parameter "xTenantId" was null or undefined when calling customerControllerGetCustomerTransactionDetail().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTenantId'] != null) {
            headerParameters['x-tenant-id'] = String(requestParameters['xTenantId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/customers/{customerId}/transactions`.replace(`{${"customerId"}}`, encodeURIComponent(String(requestParameters['customerId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetCustomerTransactionDetailResponseFromJSON(jsonValue));
    }

    /**
     * Get customer transaction details
     */
    async customerControllerGetCustomerTransactionDetail(requestParameters: CustomerControllerGetCustomerTransactionDetailRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetCustomerTransactionDetailResponse> {
        const response = await this.customerControllerGetCustomerTransactionDetailRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
