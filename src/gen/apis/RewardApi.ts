/* tslint:disable */
/* eslint-disable */
/**
 * Pontuaí
 * The Pontuaí API experience :)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateRewardDto,
  CreateRewardResponse,
  RedeemRewardDto,
  UpdateRewardDto,
} from '../models/index';
import {
    CreateRewardDtoFromJSON,
    CreateRewardDtoToJSON,
    CreateRewardResponseFromJSON,
    CreateRewardResponseToJSON,
    RedeemRewardDtoFromJSON,
    RedeemRewardDtoToJSON,
    UpdateRewardDtoFromJSON,
    UpdateRewardDtoToJSON,
} from '../models/index';

export interface RewardControllerAllRequest {
    xTenantId: string;
}

export interface RewardControllerCreateRequest {
    xTenantId: string;
    createRewardDto: CreateRewardDto;
}

export interface RewardControllerRedeemRequest {
    id: string;
    xTenantId: string;
    redeemRewardDto: RedeemRewardDto;
}

export interface RewardControllerUpdateRequest {
    id: string;
    xTenantId: string;
    updateRewardDto: UpdateRewardDto;
}

/**
 * 
 */
export class RewardApi extends runtime.BaseAPI {

    /**
     * Get all rewards
     */
    async rewardControllerAllRaw(requestParameters: RewardControllerAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<CreateRewardResponse>>> {
        if (requestParameters['xTenantId'] == null) {
            throw new runtime.RequiredError(
                'xTenantId',
                'Required parameter "xTenantId" was null or undefined when calling rewardControllerAll().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xTenantId'] != null) {
            headerParameters['x-tenant-id'] = String(requestParameters['xTenantId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reward`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CreateRewardResponseFromJSON));
    }

    /**
     * Get all rewards
     */
    async rewardControllerAll(requestParameters: RewardControllerAllRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<CreateRewardResponse>> {
        const response = await this.rewardControllerAllRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a new reward
     */
    async rewardControllerCreateRaw(requestParameters: RewardControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateRewardResponse>> {
        if (requestParameters['xTenantId'] == null) {
            throw new runtime.RequiredError(
                'xTenantId',
                'Required parameter "xTenantId" was null or undefined when calling rewardControllerCreate().'
            );
        }

        if (requestParameters['createRewardDto'] == null) {
            throw new runtime.RequiredError(
                'createRewardDto',
                'Required parameter "createRewardDto" was null or undefined when calling rewardControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xTenantId'] != null) {
            headerParameters['x-tenant-id'] = String(requestParameters['xTenantId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reward`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateRewardDtoToJSON(requestParameters['createRewardDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateRewardResponseFromJSON(jsonValue));
    }

    /**
     * Create a new reward
     */
    async rewardControllerCreate(requestParameters: RewardControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateRewardResponse> {
        const response = await this.rewardControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Redeem a reward
     */
    async rewardControllerRedeemRaw(requestParameters: RewardControllerRedeemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling rewardControllerRedeem().'
            );
        }

        if (requestParameters['xTenantId'] == null) {
            throw new runtime.RequiredError(
                'xTenantId',
                'Required parameter "xTenantId" was null or undefined when calling rewardControllerRedeem().'
            );
        }

        if (requestParameters['redeemRewardDto'] == null) {
            throw new runtime.RequiredError(
                'redeemRewardDto',
                'Required parameter "redeemRewardDto" was null or undefined when calling rewardControllerRedeem().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xTenantId'] != null) {
            headerParameters['x-tenant-id'] = String(requestParameters['xTenantId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reward/{id}/redeem`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: RedeemRewardDtoToJSON(requestParameters['redeemRewardDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Redeem a reward
     */
    async rewardControllerRedeem(requestParameters: RewardControllerRedeemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rewardControllerRedeemRaw(requestParameters, initOverrides);
    }

    /**
     * Update a reward
     */
    async rewardControllerUpdateRaw(requestParameters: RewardControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling rewardControllerUpdate().'
            );
        }

        if (requestParameters['xTenantId'] == null) {
            throw new runtime.RequiredError(
                'xTenantId',
                'Required parameter "xTenantId" was null or undefined when calling rewardControllerUpdate().'
            );
        }

        if (requestParameters['updateRewardDto'] == null) {
            throw new runtime.RequiredError(
                'updateRewardDto',
                'Required parameter "updateRewardDto" was null or undefined when calling rewardControllerUpdate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xTenantId'] != null) {
            headerParameters['x-tenant-id'] = String(requestParameters['xTenantId']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/reward/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateRewardDtoToJSON(requestParameters['updateRewardDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a reward
     */
    async rewardControllerUpdate(requestParameters: RewardControllerUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.rewardControllerUpdateRaw(requestParameters, initOverrides);
    }

}
