/* tslint:disable */
/* eslint-disable */
/**
 * Pontuaí
 * The Pontuaí API experience :)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateTenantDto,
  CreateTenantResponse,
  GetTenant,
  UpdateTenantSettingsDto,
} from '../models/index';
import {
    CreateTenantDtoFromJSON,
    CreateTenantDtoToJSON,
    CreateTenantResponseFromJSON,
    CreateTenantResponseToJSON,
    GetTenantFromJSON,
    GetTenantToJSON,
    UpdateTenantSettingsDtoFromJSON,
    UpdateTenantSettingsDtoToJSON,
} from '../models/index';

export interface TenantControllerCreateRequest {
    createTenantDto: CreateTenantDto;
}

export interface TenantControllerUpdateConfigRequest {
    tenantId: string;
    updateTenantSettingsDto: UpdateTenantSettingsDto;
}

/**
 * 
 */
export class TenantApi extends runtime.BaseAPI {

    /**
     * Create a new tenant
     */
    async tenantControllerCreateRaw(requestParameters: TenantControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateTenantResponse>> {
        if (requestParameters['createTenantDto'] == null) {
            throw new runtime.RequiredError(
                'createTenantDto',
                'Required parameter "createTenantDto" was null or undefined when calling tenantControllerCreate().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tenant`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateTenantDtoToJSON(requestParameters['createTenantDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateTenantResponseFromJSON(jsonValue));
    }

    /**
     * Create a new tenant
     */
    async tenantControllerCreate(requestParameters: TenantControllerCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateTenantResponse> {
        const response = await this.tenantControllerCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get my tenants
     */
    async tenantControllerGetMyTenantsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetTenant>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tenant`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetTenantFromJSON));
    }

    /**
     * Get my tenants
     */
    async tenantControllerGetMyTenants(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetTenant>> {
        const response = await this.tenantControllerGetMyTenantsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update tenant settings
     */
    async tenantControllerUpdateConfigRaw(requestParameters: TenantControllerUpdateConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tenantId'] == null) {
            throw new runtime.RequiredError(
                'tenantId',
                'Required parameter "tenantId" was null or undefined when calling tenantControllerUpdateConfig().'
            );
        }

        if (requestParameters['updateTenantSettingsDto'] == null) {
            throw new runtime.RequiredError(
                'updateTenantSettingsDto',
                'Required parameter "updateTenantSettingsDto" was null or undefined when calling tenantControllerUpdateConfig().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/tenant/{tenant_id}/settings`.replace(`{${"tenant_id"}}`, encodeURIComponent(String(requestParameters['tenantId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateTenantSettingsDtoToJSON(requestParameters['updateTenantSettingsDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update tenant settings
     */
    async tenantControllerUpdateConfig(requestParameters: TenantControllerUpdateConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.tenantControllerUpdateConfigRaw(requestParameters, initOverrides);
    }

}
